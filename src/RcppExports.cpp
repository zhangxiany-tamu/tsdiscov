// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_acf
NumericVector cpp_acf(NumericVector x, int max_lag, bool normalize);
RcppExport SEXP _tsdiscov_cpp_acf(SEXP xSEXP, SEXP max_lagSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_acf(x, max_lag, normalize));
    return rcpp_result_gen;
END_RCPP
}
// cpp_acf_first_min
double cpp_acf_first_min(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_acf_first_min(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_acf_first_min(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_acf_timescale
double cpp_acf_timescale(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_acf_timescale(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_acf_timescale(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_acf_features
NumericVector cpp_acf_features(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_acf_features(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_acf_features(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_absolute_sum_of_changes
double cpp_absolute_sum_of_changes(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_absolute_sum_of_changes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_absolute_sum_of_changes(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_range
double cpp_range(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_range(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_range(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_median_absolute_deviation
double cpp_median_absolute_deviation(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_median_absolute_deviation(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_median_absolute_deviation(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_coefficient_of_variation
double cpp_coefficient_of_variation(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_coefficient_of_variation(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_coefficient_of_variation(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_benford_correlation
double cpp_benford_correlation(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_benford_correlation(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_benford_correlation(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_automutual_info_lag2
double cpp_automutual_info_lag2(NumericVector x, int num_bins);
RcppExport SEXP _tsdiscov_cpp_automutual_info_lag2(SEXP xSEXP, SEXP num_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_bins(num_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_automutual_info_lag2(x, num_bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_automutual_info_first_min
double cpp_automutual_info_first_min(NumericVector x, int max_lag, int num_bins);
RcppExport SEXP _tsdiscov_cpp_automutual_info_first_min(SEXP xSEXP, SEXP max_lagSEXP, SEXP num_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    Rcpp::traits::input_parameter< int >::type num_bins(num_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_automutual_info_first_min(x, max_lag, num_bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_embedding_dist_exp_fit
double cpp_embedding_dist_exp_fit(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_embedding_dist_exp_fit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_embedding_dist_exp_fit(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_dfa
double cpp_dfa(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_dfa(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_dfa(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rs_range
double cpp_rs_range(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_rs_range(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rs_range(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_periodicity_wang
double cpp_periodicity_wang(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_periodicity_wang(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_periodicity_wang(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mean
double cpp_mean(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_std
double cpp_std(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_std(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_std(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_variance
double cpp_variance(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_variance(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_variance(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_skewness
double cpp_skewness(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_skewness(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_skewness(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_kurtosis
double cpp_kurtosis(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_kurtosis(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_kurtosis(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_quantile
NumericVector cpp_quantile(NumericVector x, NumericVector probs);
RcppExport SEXP _tsdiscov_cpp_quantile(SEXP xSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_quantile(x, probs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_histogram_mode_5
double cpp_histogram_mode_5(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_histogram_mode_5(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_histogram_mode_5(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_histogram_mode_10
double cpp_histogram_mode_10(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_histogram_mode_10(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_histogram_mode_10(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_outlier_timing
double cpp_outlier_timing(NumericVector x, bool positive, double threshold);
RcppExport SEXP _tsdiscov_cpp_outlier_timing(SEXP xSEXP, SEXP positiveSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type positive(positiveSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_outlier_timing(x, positive, threshold));
    return rcpp_result_gen;
END_RCPP
}
// cpp_outlier_timing_pos
double cpp_outlier_timing_pos(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_outlier_timing_pos(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_outlier_timing_pos(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_outlier_timing_neg
double cpp_outlier_timing_neg(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_outlier_timing_neg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_outlier_timing_neg(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_long_stretch
double cpp_long_stretch(NumericVector x, bool above_mean);
RcppExport SEXP _tsdiscov_cpp_long_stretch(SEXP xSEXP, SEXP above_meanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type above_mean(above_meanSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_long_stretch(x, above_mean));
    return rcpp_result_gen;
END_RCPP
}
// cpp_stretch_high
double cpp_stretch_high(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_stretch_high(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_stretch_high(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_stretch_low
double cpp_stretch_low(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_stretch_low(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_stretch_low(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_transition_variance
double cpp_transition_variance(NumericVector x, int num_bins);
RcppExport SEXP _tsdiscov_cpp_transition_variance(SEXP xSEXP, SEXP num_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_bins(num_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_transition_variance(x, num_bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_crossing_points
int cpp_crossing_points(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_crossing_points(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_crossing_points(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_flat_spots
int cpp_flat_spots(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_flat_spots(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_flat_spots(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_embed2_incircle
double cpp_embed2_incircle(NumericVector y, int boundary);
RcppExport SEXP _tsdiscov_cpp_embed2_incircle(SEXP ySEXP, SEXP boundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type boundary(boundarySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_embed2_incircle(y, boundary));
    return rcpp_result_gen;
END_RCPP
}
// cpp_motiftwo_entro3
double cpp_motiftwo_entro3(NumericVector y);
RcppExport SEXP _tsdiscov_cpp_motiftwo_entro3(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_motiftwo_entro3(y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_walker_propcross
double cpp_walker_propcross(NumericVector y);
RcppExport SEXP _tsdiscov_cpp_walker_propcross(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_walker_propcross(y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff
NumericVector cpp_diff(NumericVector x, int lag, int differences);
RcppExport SEXP _tsdiscov_cpp_diff(SEXP xSEXP, SEXP lagSEXP, SEXP differencesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    Rcpp::traits::input_parameter< int >::type differences(differencesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff(x, lag, differences));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff1_acf1
double cpp_diff1_acf1(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff1_acf1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff1_acf1(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff1_acf10
double cpp_diff1_acf10(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff1_acf10(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff1_acf10(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff2_acf1
double cpp_diff2_acf1(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff2_acf1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff2_acf1(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff2_acf10
double cpp_diff2_acf10(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff2_acf10(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff2_acf10(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff1x_pacf5
double cpp_diff1x_pacf5(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff1x_pacf5(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff1x_pacf5(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff2x_pacf5
double cpp_diff2x_pacf5(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff2x_pacf5(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff2x_pacf5(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_diff_acf_features
NumericVector cpp_diff_acf_features(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_diff_acf_features(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_diff_acf_features(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sample_entropy
double cpp_sample_entropy(NumericVector x, int m, double r);
RcppExport SEXP _tsdiscov_cpp_sample_entropy(SEXP xSEXP, SEXP mSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sample_entropy(x, m, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_approximate_entropy
double cpp_approximate_entropy(NumericVector x, int m, double r);
RcppExport SEXP _tsdiscov_cpp_approximate_entropy(SEXP xSEXP, SEXP mSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_approximate_entropy(x, m, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_permutation_entropy
double cpp_permutation_entropy(NumericVector x, int m, int tau);
RcppExport SEXP _tsdiscov_cpp_permutation_entropy(SEXP xSEXP, SEXP mSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_permutation_entropy(x, m, tau));
    return rcpp_result_gen;
END_RCPP
}
// cpp_shannon_entropy
double cpp_shannon_entropy(NumericVector x, int num_bins);
RcppExport SEXP _tsdiscov_cpp_shannon_entropy(SEXP xSEXP, SEXP num_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_bins(num_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_shannon_entropy(x, num_bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_multiscale_entropy
NumericVector cpp_multiscale_entropy(NumericVector x, IntegerVector scales, int m, double r);
RcppExport SEXP _tsdiscov_cpp_multiscale_entropy(SEXP xSEXP, SEXP scalesSEXP, SEXP mSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scales(scalesSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_multiscale_entropy(x, scales, m, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_forecast_error_mean3
double cpp_forecast_error_mean3(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_forecast_error_mean3(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_forecast_error_mean3(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_timescale_ratio_after_whitening
double cpp_timescale_ratio_after_whitening(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_timescale_ratio_after_whitening(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_timescale_ratio_after_whitening(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_time_reversibility
double cpp_time_reversibility(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_time_reversibility(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_time_reversibility(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_high_fluctuation_prop
double cpp_high_fluctuation_prop(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_high_fluctuation_prop(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_high_fluctuation_prop(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_arch_acf
double cpp_arch_acf(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_arch_acf(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_arch_acf(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_firstzero_ac
int cpp_firstzero_ac(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_firstzero_ac(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_firstzero_ac(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_zero_proportion
double cpp_zero_proportion(NumericVector x, double tol);
RcppExport SEXP _tsdiscov_cpp_zero_proportion(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_zero_proportion(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// cpp_std1st_der
double cpp_std1st_der(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_std1st_der(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_std1st_der(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_motif_three_quantile
double cpp_motif_three_quantile(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_motif_three_quantile(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_motif_three_quantile(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pairwise_ccf
List cpp_pairwise_ccf(arma::mat X, int max_lag);
RcppExport SEXP _tsdiscov_cpp_pairwise_ccf(SEXP XSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_ccf(X, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mutual_information
double cpp_mutual_information(NumericVector x, NumericVector y, int bins);
RcppExport SEXP _tsdiscov_cpp_mutual_information(SEXP xSEXP, SEXP ySEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mutual_information(x, y, bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pairwise_mi
NumericVector cpp_pairwise_mi(arma::mat X, int bins);
RcppExport SEXP _tsdiscov_cpp_pairwise_mi(SEXP XSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pairwise_mi(X, bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mv_shannon_entropy
double cpp_mv_shannon_entropy(NumericVector x, int bins);
RcppExport SEXP _tsdiscov_cpp_mv_shannon_entropy(SEXP xSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mv_shannon_entropy(x, bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cross_spectral_density
List cpp_cross_spectral_density(NumericVector x, NumericVector y);
RcppExport SEXP _tsdiscov_cpp_cross_spectral_density(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cross_spectral_density(x, y));
    return rcpp_result_gen;
END_RCPP
}
// cpp_series_statistics
List cpp_series_statistics(arma::mat X);
RcppExport SEXP _tsdiscov_cpp_series_statistics(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_series_statistics(X));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pacf
NumericVector cpp_pacf(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_pacf(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pacf(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pacf_features
NumericVector cpp_pacf_features(NumericVector x, int max_lag);
RcppExport SEXP _tsdiscov_cpp_pacf_features(SEXP xSEXP, SEXP max_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pacf_features(x, max_lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_matrix_profile
List cpp_matrix_profile(NumericVector x, int window_size);
RcppExport SEXP _tsdiscov_cpp_matrix_profile(SEXP xSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_matrix_profile(x, window_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_friedrich_coefficients
List cpp_friedrich_coefficients(NumericVector x, int max_order);
RcppExport SEXP _tsdiscov_cpp_friedrich_coefficients(SEXP xSEXP, SEXP max_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_order(max_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_friedrich_coefficients(x, max_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_langevin_fixed_point
List cpp_langevin_fixed_point(NumericVector x, int max_order);
RcppExport SEXP _tsdiscov_cpp_langevin_fixed_point(SEXP xSEXP, SEXP max_orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_order(max_orderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_langevin_fixed_point(x, max_order));
    return rcpp_result_gen;
END_RCPP
}
// cpp_recurrence_analysis
List cpp_recurrence_analysis(NumericVector x, double threshold_percent, int min_line_length, int max_points);
RcppExport SEXP _tsdiscov_cpp_recurrence_analysis(SEXP xSEXP, SEXP threshold_percentSEXP, SEXP min_line_lengthSEXP, SEXP max_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type threshold_percent(threshold_percentSEXP);
    Rcpp::traits::input_parameter< int >::type min_line_length(min_line_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type max_points(max_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_recurrence_analysis(x, threshold_percent, min_line_length, max_points));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hurst_exponent
double cpp_hurst_exponent(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_hurst_exponent(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hurst_exponent(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_stability
double cpp_stability(NumericVector x, int window_size);
RcppExport SEXP _tsdiscov_cpp_stability(SEXP xSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_stability(x, window_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lumpiness
double cpp_lumpiness(NumericVector x, int window_size);
RcppExport SEXP _tsdiscov_cpp_lumpiness(SEXP xSEXP, SEXP window_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lumpiness(x, window_size));
    return rcpp_result_gen;
END_RCPP
}
// cpp_shift_detection
NumericVector cpp_shift_detection(NumericVector x, int width);
RcppExport SEXP _tsdiscov_cpp_shift_detection(SEXP xSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_shift_detection(x, width));
    return rcpp_result_gen;
END_RCPP
}
// cpp_welch_power_low_freq
double cpp_welch_power_low_freq(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_welch_power_low_freq(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_welch_power_low_freq(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_spectral_centroid
double cpp_spectral_centroid(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_spectral_centroid(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_spectral_centroid(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_spectral_entropy
double cpp_spectral_entropy(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_spectral_entropy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_spectral_entropy(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fft_coefficients
NumericVector cpp_fft_coefficients(NumericVector x, int num_coef);
RcppExport SEXP _tsdiscov_cpp_fft_coefficients(SEXP xSEXP, SEXP num_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_coef(num_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fft_coefficients(x, num_coef));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fft_aggregated
NumericVector cpp_fft_aggregated(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_fft_aggregated(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fft_aggregated(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_welch_psd
NumericVector cpp_welch_psd(NumericVector x, int n_freq, int window_size, double overlap);
RcppExport SEXP _tsdiscov_cpp_welch_psd(SEXP xSEXP, SEXP n_freqSEXP, SEXP window_sizeSEXP, SEXP overlapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n_freq(n_freqSEXP);
    Rcpp::traits::input_parameter< int >::type window_size(window_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type overlap(overlapSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_welch_psd(x, n_freq, window_size, overlap));
    return rcpp_result_gen;
END_RCPP
}
// cpp_spectral_shape
List cpp_spectral_shape(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_spectral_shape(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_spectral_shape(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_trend_strength
double cpp_trend_strength(NumericVector trend, NumericVector remainder);
RcppExport SEXP _tsdiscov_cpp_trend_strength(SEXP trendSEXP, SEXP remainderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trend(trendSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type remainder(remainderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_trend_strength(trend, remainder));
    return rcpp_result_gen;
END_RCPP
}
// cpp_seasonal_strength
double cpp_seasonal_strength(NumericVector seasonal, NumericVector remainder);
RcppExport SEXP _tsdiscov_cpp_seasonal_strength(SEXP seasonalSEXP, SEXP remainderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type seasonal(seasonalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type remainder(remainderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_seasonal_strength(seasonal, remainder));
    return rcpp_result_gen;
END_RCPP
}
// cpp_spike
double cpp_spike(NumericVector remainder);
RcppExport SEXP _tsdiscov_cpp_spike(SEXP remainderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type remainder(remainderSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_spike(remainder));
    return rcpp_result_gen;
END_RCPP
}
// cpp_linearity
double cpp_linearity(NumericVector trend);
RcppExport SEXP _tsdiscov_cpp_linearity(SEXP trendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trend(trendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_linearity(trend));
    return rcpp_result_gen;
END_RCPP
}
// cpp_curvature
double cpp_curvature(NumericVector trend);
RcppExport SEXP _tsdiscov_cpp_curvature(SEXP trendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type trend(trendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_curvature(trend));
    return rcpp_result_gen;
END_RCPP
}
// cpp_number_peaks
int cpp_number_peaks(NumericVector x, int support);
RcppExport SEXP _tsdiscov_cpp_number_peaks(SEXP xSEXP, SEXP supportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type support(supportSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_number_peaks(x, support));
    return rcpp_result_gen;
END_RCPP
}
// cpp_longest_strike_above_mean
int cpp_longest_strike_above_mean(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_longest_strike_above_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_longest_strike_above_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_longest_strike_below_mean
int cpp_longest_strike_below_mean(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_longest_strike_below_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_longest_strike_below_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_count_above_mean
int cpp_count_above_mean(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_count_above_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_count_above_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_count_below_mean
int cpp_count_below_mean(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_count_below_mean(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_count_below_mean(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ratio_beyond_r_sigma
double cpp_ratio_beyond_r_sigma(NumericVector x, double r);
RcppExport SEXP _tsdiscov_cpp_ratio_beyond_r_sigma(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ratio_beyond_r_sigma(x, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_number_crossings
int cpp_number_crossings(NumericVector x, double m);
RcppExport SEXP _tsdiscov_cpp_number_crossings(SEXP xSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_number_crossings(x, m));
    return rcpp_result_gen;
END_RCPP
}
// cpp_linear_trend
NumericVector cpp_linear_trend(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_linear_trend(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_linear_trend(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mean_abs_change
double cpp_mean_abs_change(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_mean_abs_change(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mean_abs_change(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mean_change
double cpp_mean_change(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_mean_change(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mean_change(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mean_second_derivative
double cpp_mean_second_derivative(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_mean_second_derivative(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mean_second_derivative(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_time_weighted_trend
NumericVector cpp_time_weighted_trend(NumericVector x, double decay);
RcppExport SEXP _tsdiscov_cpp_time_weighted_trend(SEXP xSEXP, SEXP decaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_time_weighted_trend(x, decay));
    return rcpp_result_gen;
END_RCPP
}
// cpp_robust_trend
NumericVector cpp_robust_trend(NumericVector x, int max_pairs);
RcppExport SEXP _tsdiscov_cpp_robust_trend(SEXP xSEXP, SEXP max_pairsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_pairs(max_pairsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_robust_trend(x, max_pairs));
    return rcpp_result_gen;
END_RCPP
}
// cpp_c3
double cpp_c3(NumericVector x, int lag);
RcppExport SEXP _tsdiscov_cpp_c3(SEXP xSEXP, SEXP lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type lag(lagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_c3(x, lag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cid_ce
double cpp_cid_ce(NumericVector x, bool normalize);
RcppExport SEXP _tsdiscov_cpp_cid_ce(SEXP xSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cid_ce(x, normalize));
    return rcpp_result_gen;
END_RCPP
}
// cpp_lempel_ziv_complexity
double cpp_lempel_ziv_complexity(NumericVector x, int bins);
RcppExport SEXP _tsdiscov_cpp_lempel_ziv_complexity(SEXP xSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_lempel_ziv_complexity(x, bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_index_mass_quantile
double cpp_index_mass_quantile(NumericVector x, double q);
RcppExport SEXP _tsdiscov_cpp_index_mass_quantile(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_index_mass_quantile(x, q));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mean_n_absolute_max
double cpp_mean_n_absolute_max(NumericVector x, int number_of_maxima);
RcppExport SEXP _tsdiscov_cpp_mean_n_absolute_max(SEXP xSEXP, SEXP number_of_maximaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_maxima(number_of_maximaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mean_n_absolute_max(x, number_of_maxima));
    return rcpp_result_gen;
END_RCPP
}
// cpp_energy_ratio_by_chunks
double cpp_energy_ratio_by_chunks(NumericVector x, int num_segments, int segment_focus);
RcppExport SEXP _tsdiscov_cpp_energy_ratio_by_chunks(SEXP xSEXP, SEXP num_segmentsSEXP, SEXP segment_focusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type num_segments(num_segmentsSEXP);
    Rcpp::traits::input_parameter< int >::type segment_focus(segment_focusSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_energy_ratio_by_chunks(x, num_segments, segment_focus));
    return rcpp_result_gen;
END_RCPP
}
// cpp_change_quantiles
double cpp_change_quantiles(NumericVector x, double ql, double qh, bool isabs, std::string f_agg);
RcppExport SEXP _tsdiscov_cpp_change_quantiles(SEXP xSEXP, SEXP qlSEXP, SEXP qhSEXP, SEXP isabsSEXP, SEXP f_aggSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type ql(qlSEXP);
    Rcpp::traits::input_parameter< double >::type qh(qhSEXP);
    Rcpp::traits::input_parameter< bool >::type isabs(isabsSEXP);
    Rcpp::traits::input_parameter< std::string >::type f_agg(f_aggSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_change_quantiles(x, ql, qh, isabs, f_agg));
    return rcpp_result_gen;
END_RCPP
}
// cpp_fourier_entropy
double cpp_fourier_entropy(NumericVector x, int bins);
RcppExport SEXP _tsdiscov_cpp_fourier_entropy(SEXP xSEXP, SEXP binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_fourier_entropy(x, bins));
    return rcpp_result_gen;
END_RCPP
}
// cpp_abs_energy
double cpp_abs_energy(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_abs_energy(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_abs_energy(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sum_values
double cpp_sum_values(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_sum_values(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sum_values(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_has_duplicate
bool cpp_has_duplicate(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_has_duplicate(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_has_duplicate(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_has_duplicate_max
bool cpp_has_duplicate_max(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_has_duplicate_max(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_has_duplicate_max(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_has_duplicate_min
bool cpp_has_duplicate_min(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_has_duplicate_min(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_has_duplicate_min(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_percentage_reoccurring
double cpp_percentage_reoccurring(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_percentage_reoccurring(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_percentage_reoccurring(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sum_reoccurring
double cpp_sum_reoccurring(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_sum_reoccurring(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sum_reoccurring(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_ratio_unique_values
double cpp_ratio_unique_values(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_ratio_unique_values(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_ratio_unique_values(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_symmetry_looking
bool cpp_symmetry_looking(NumericVector x, double r);
RcppExport SEXP _tsdiscov_cpp_symmetry_looking(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_symmetry_looking(x, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_large_standard_deviation
bool cpp_large_standard_deviation(NumericVector x, double r);
RcppExport SEXP _tsdiscov_cpp_large_standard_deviation(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_large_standard_deviation(x, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_variance_larger_than_std
bool cpp_variance_larger_than_std(NumericVector x);
RcppExport SEXP _tsdiscov_cpp_variance_larger_than_std(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_variance_larger_than_std(x));
    return rcpp_result_gen;
END_RCPP
}
// cpp_adf_test
List cpp_adf_test(NumericVector x, int max_lag, bool include_trend);
RcppExport SEXP _tsdiscov_cpp_adf_test(SEXP xSEXP, SEXP max_lagSEXP, SEXP include_trendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type max_lag(max_lagSEXP);
    Rcpp::traits::input_parameter< bool >::type include_trend(include_trendSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_adf_test(x, max_lag, include_trend));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tsdiscov_cpp_acf", (DL_FUNC) &_tsdiscov_cpp_acf, 3},
    {"_tsdiscov_cpp_acf_first_min", (DL_FUNC) &_tsdiscov_cpp_acf_first_min, 2},
    {"_tsdiscov_cpp_acf_timescale", (DL_FUNC) &_tsdiscov_cpp_acf_timescale, 2},
    {"_tsdiscov_cpp_acf_features", (DL_FUNC) &_tsdiscov_cpp_acf_features, 2},
    {"_tsdiscov_cpp_absolute_sum_of_changes", (DL_FUNC) &_tsdiscov_cpp_absolute_sum_of_changes, 1},
    {"_tsdiscov_cpp_range", (DL_FUNC) &_tsdiscov_cpp_range, 1},
    {"_tsdiscov_cpp_median_absolute_deviation", (DL_FUNC) &_tsdiscov_cpp_median_absolute_deviation, 1},
    {"_tsdiscov_cpp_coefficient_of_variation", (DL_FUNC) &_tsdiscov_cpp_coefficient_of_variation, 1},
    {"_tsdiscov_cpp_benford_correlation", (DL_FUNC) &_tsdiscov_cpp_benford_correlation, 1},
    {"_tsdiscov_cpp_automutual_info_lag2", (DL_FUNC) &_tsdiscov_cpp_automutual_info_lag2, 2},
    {"_tsdiscov_cpp_automutual_info_first_min", (DL_FUNC) &_tsdiscov_cpp_automutual_info_first_min, 3},
    {"_tsdiscov_cpp_embedding_dist_exp_fit", (DL_FUNC) &_tsdiscov_cpp_embedding_dist_exp_fit, 1},
    {"_tsdiscov_cpp_dfa", (DL_FUNC) &_tsdiscov_cpp_dfa, 1},
    {"_tsdiscov_cpp_rs_range", (DL_FUNC) &_tsdiscov_cpp_rs_range, 1},
    {"_tsdiscov_cpp_periodicity_wang", (DL_FUNC) &_tsdiscov_cpp_periodicity_wang, 1},
    {"_tsdiscov_cpp_mean", (DL_FUNC) &_tsdiscov_cpp_mean, 1},
    {"_tsdiscov_cpp_std", (DL_FUNC) &_tsdiscov_cpp_std, 1},
    {"_tsdiscov_cpp_variance", (DL_FUNC) &_tsdiscov_cpp_variance, 1},
    {"_tsdiscov_cpp_skewness", (DL_FUNC) &_tsdiscov_cpp_skewness, 1},
    {"_tsdiscov_cpp_kurtosis", (DL_FUNC) &_tsdiscov_cpp_kurtosis, 1},
    {"_tsdiscov_cpp_quantile", (DL_FUNC) &_tsdiscov_cpp_quantile, 2},
    {"_tsdiscov_cpp_histogram_mode_5", (DL_FUNC) &_tsdiscov_cpp_histogram_mode_5, 1},
    {"_tsdiscov_cpp_histogram_mode_10", (DL_FUNC) &_tsdiscov_cpp_histogram_mode_10, 1},
    {"_tsdiscov_cpp_outlier_timing", (DL_FUNC) &_tsdiscov_cpp_outlier_timing, 3},
    {"_tsdiscov_cpp_outlier_timing_pos", (DL_FUNC) &_tsdiscov_cpp_outlier_timing_pos, 1},
    {"_tsdiscov_cpp_outlier_timing_neg", (DL_FUNC) &_tsdiscov_cpp_outlier_timing_neg, 1},
    {"_tsdiscov_cpp_long_stretch", (DL_FUNC) &_tsdiscov_cpp_long_stretch, 2},
    {"_tsdiscov_cpp_stretch_high", (DL_FUNC) &_tsdiscov_cpp_stretch_high, 1},
    {"_tsdiscov_cpp_stretch_low", (DL_FUNC) &_tsdiscov_cpp_stretch_low, 1},
    {"_tsdiscov_cpp_transition_variance", (DL_FUNC) &_tsdiscov_cpp_transition_variance, 2},
    {"_tsdiscov_cpp_crossing_points", (DL_FUNC) &_tsdiscov_cpp_crossing_points, 1},
    {"_tsdiscov_cpp_flat_spots", (DL_FUNC) &_tsdiscov_cpp_flat_spots, 1},
    {"_tsdiscov_cpp_embed2_incircle", (DL_FUNC) &_tsdiscov_cpp_embed2_incircle, 2},
    {"_tsdiscov_cpp_motiftwo_entro3", (DL_FUNC) &_tsdiscov_cpp_motiftwo_entro3, 1},
    {"_tsdiscov_cpp_walker_propcross", (DL_FUNC) &_tsdiscov_cpp_walker_propcross, 1},
    {"_tsdiscov_cpp_diff", (DL_FUNC) &_tsdiscov_cpp_diff, 3},
    {"_tsdiscov_cpp_diff1_acf1", (DL_FUNC) &_tsdiscov_cpp_diff1_acf1, 1},
    {"_tsdiscov_cpp_diff1_acf10", (DL_FUNC) &_tsdiscov_cpp_diff1_acf10, 1},
    {"_tsdiscov_cpp_diff2_acf1", (DL_FUNC) &_tsdiscov_cpp_diff2_acf1, 1},
    {"_tsdiscov_cpp_diff2_acf10", (DL_FUNC) &_tsdiscov_cpp_diff2_acf10, 1},
    {"_tsdiscov_cpp_diff1x_pacf5", (DL_FUNC) &_tsdiscov_cpp_diff1x_pacf5, 1},
    {"_tsdiscov_cpp_diff2x_pacf5", (DL_FUNC) &_tsdiscov_cpp_diff2x_pacf5, 1},
    {"_tsdiscov_cpp_diff_acf_features", (DL_FUNC) &_tsdiscov_cpp_diff_acf_features, 1},
    {"_tsdiscov_cpp_sample_entropy", (DL_FUNC) &_tsdiscov_cpp_sample_entropy, 3},
    {"_tsdiscov_cpp_approximate_entropy", (DL_FUNC) &_tsdiscov_cpp_approximate_entropy, 3},
    {"_tsdiscov_cpp_permutation_entropy", (DL_FUNC) &_tsdiscov_cpp_permutation_entropy, 3},
    {"_tsdiscov_cpp_shannon_entropy", (DL_FUNC) &_tsdiscov_cpp_shannon_entropy, 2},
    {"_tsdiscov_cpp_multiscale_entropy", (DL_FUNC) &_tsdiscov_cpp_multiscale_entropy, 4},
    {"_tsdiscov_cpp_forecast_error_mean3", (DL_FUNC) &_tsdiscov_cpp_forecast_error_mean3, 1},
    {"_tsdiscov_cpp_timescale_ratio_after_whitening", (DL_FUNC) &_tsdiscov_cpp_timescale_ratio_after_whitening, 1},
    {"_tsdiscov_cpp_time_reversibility", (DL_FUNC) &_tsdiscov_cpp_time_reversibility, 1},
    {"_tsdiscov_cpp_high_fluctuation_prop", (DL_FUNC) &_tsdiscov_cpp_high_fluctuation_prop, 1},
    {"_tsdiscov_cpp_arch_acf", (DL_FUNC) &_tsdiscov_cpp_arch_acf, 1},
    {"_tsdiscov_cpp_firstzero_ac", (DL_FUNC) &_tsdiscov_cpp_firstzero_ac, 2},
    {"_tsdiscov_cpp_zero_proportion", (DL_FUNC) &_tsdiscov_cpp_zero_proportion, 2},
    {"_tsdiscov_cpp_std1st_der", (DL_FUNC) &_tsdiscov_cpp_std1st_der, 1},
    {"_tsdiscov_cpp_motif_three_quantile", (DL_FUNC) &_tsdiscov_cpp_motif_three_quantile, 1},
    {"_tsdiscov_cpp_pairwise_ccf", (DL_FUNC) &_tsdiscov_cpp_pairwise_ccf, 2},
    {"_tsdiscov_cpp_mutual_information", (DL_FUNC) &_tsdiscov_cpp_mutual_information, 3},
    {"_tsdiscov_cpp_pairwise_mi", (DL_FUNC) &_tsdiscov_cpp_pairwise_mi, 2},
    {"_tsdiscov_cpp_mv_shannon_entropy", (DL_FUNC) &_tsdiscov_cpp_mv_shannon_entropy, 2},
    {"_tsdiscov_cpp_cross_spectral_density", (DL_FUNC) &_tsdiscov_cpp_cross_spectral_density, 2},
    {"_tsdiscov_cpp_series_statistics", (DL_FUNC) &_tsdiscov_cpp_series_statistics, 1},
    {"_tsdiscov_cpp_pacf", (DL_FUNC) &_tsdiscov_cpp_pacf, 2},
    {"_tsdiscov_cpp_pacf_features", (DL_FUNC) &_tsdiscov_cpp_pacf_features, 2},
    {"_tsdiscov_cpp_matrix_profile", (DL_FUNC) &_tsdiscov_cpp_matrix_profile, 2},
    {"_tsdiscov_cpp_friedrich_coefficients", (DL_FUNC) &_tsdiscov_cpp_friedrich_coefficients, 2},
    {"_tsdiscov_cpp_langevin_fixed_point", (DL_FUNC) &_tsdiscov_cpp_langevin_fixed_point, 2},
    {"_tsdiscov_cpp_recurrence_analysis", (DL_FUNC) &_tsdiscov_cpp_recurrence_analysis, 4},
    {"_tsdiscov_cpp_hurst_exponent", (DL_FUNC) &_tsdiscov_cpp_hurst_exponent, 1},
    {"_tsdiscov_cpp_stability", (DL_FUNC) &_tsdiscov_cpp_stability, 2},
    {"_tsdiscov_cpp_lumpiness", (DL_FUNC) &_tsdiscov_cpp_lumpiness, 2},
    {"_tsdiscov_cpp_shift_detection", (DL_FUNC) &_tsdiscov_cpp_shift_detection, 2},
    {"_tsdiscov_cpp_welch_power_low_freq", (DL_FUNC) &_tsdiscov_cpp_welch_power_low_freq, 1},
    {"_tsdiscov_cpp_spectral_centroid", (DL_FUNC) &_tsdiscov_cpp_spectral_centroid, 1},
    {"_tsdiscov_cpp_spectral_entropy", (DL_FUNC) &_tsdiscov_cpp_spectral_entropy, 1},
    {"_tsdiscov_cpp_fft_coefficients", (DL_FUNC) &_tsdiscov_cpp_fft_coefficients, 2},
    {"_tsdiscov_cpp_fft_aggregated", (DL_FUNC) &_tsdiscov_cpp_fft_aggregated, 1},
    {"_tsdiscov_cpp_welch_psd", (DL_FUNC) &_tsdiscov_cpp_welch_psd, 4},
    {"_tsdiscov_cpp_spectral_shape", (DL_FUNC) &_tsdiscov_cpp_spectral_shape, 1},
    {"_tsdiscov_cpp_trend_strength", (DL_FUNC) &_tsdiscov_cpp_trend_strength, 2},
    {"_tsdiscov_cpp_seasonal_strength", (DL_FUNC) &_tsdiscov_cpp_seasonal_strength, 2},
    {"_tsdiscov_cpp_spike", (DL_FUNC) &_tsdiscov_cpp_spike, 1},
    {"_tsdiscov_cpp_linearity", (DL_FUNC) &_tsdiscov_cpp_linearity, 1},
    {"_tsdiscov_cpp_curvature", (DL_FUNC) &_tsdiscov_cpp_curvature, 1},
    {"_tsdiscov_cpp_number_peaks", (DL_FUNC) &_tsdiscov_cpp_number_peaks, 2},
    {"_tsdiscov_cpp_longest_strike_above_mean", (DL_FUNC) &_tsdiscov_cpp_longest_strike_above_mean, 1},
    {"_tsdiscov_cpp_longest_strike_below_mean", (DL_FUNC) &_tsdiscov_cpp_longest_strike_below_mean, 1},
    {"_tsdiscov_cpp_count_above_mean", (DL_FUNC) &_tsdiscov_cpp_count_above_mean, 1},
    {"_tsdiscov_cpp_count_below_mean", (DL_FUNC) &_tsdiscov_cpp_count_below_mean, 1},
    {"_tsdiscov_cpp_ratio_beyond_r_sigma", (DL_FUNC) &_tsdiscov_cpp_ratio_beyond_r_sigma, 2},
    {"_tsdiscov_cpp_number_crossings", (DL_FUNC) &_tsdiscov_cpp_number_crossings, 2},
    {"_tsdiscov_cpp_linear_trend", (DL_FUNC) &_tsdiscov_cpp_linear_trend, 1},
    {"_tsdiscov_cpp_mean_abs_change", (DL_FUNC) &_tsdiscov_cpp_mean_abs_change, 1},
    {"_tsdiscov_cpp_mean_change", (DL_FUNC) &_tsdiscov_cpp_mean_change, 1},
    {"_tsdiscov_cpp_mean_second_derivative", (DL_FUNC) &_tsdiscov_cpp_mean_second_derivative, 1},
    {"_tsdiscov_cpp_time_weighted_trend", (DL_FUNC) &_tsdiscov_cpp_time_weighted_trend, 2},
    {"_tsdiscov_cpp_robust_trend", (DL_FUNC) &_tsdiscov_cpp_robust_trend, 2},
    {"_tsdiscov_cpp_c3", (DL_FUNC) &_tsdiscov_cpp_c3, 2},
    {"_tsdiscov_cpp_cid_ce", (DL_FUNC) &_tsdiscov_cpp_cid_ce, 2},
    {"_tsdiscov_cpp_lempel_ziv_complexity", (DL_FUNC) &_tsdiscov_cpp_lempel_ziv_complexity, 2},
    {"_tsdiscov_cpp_index_mass_quantile", (DL_FUNC) &_tsdiscov_cpp_index_mass_quantile, 2},
    {"_tsdiscov_cpp_mean_n_absolute_max", (DL_FUNC) &_tsdiscov_cpp_mean_n_absolute_max, 2},
    {"_tsdiscov_cpp_energy_ratio_by_chunks", (DL_FUNC) &_tsdiscov_cpp_energy_ratio_by_chunks, 3},
    {"_tsdiscov_cpp_change_quantiles", (DL_FUNC) &_tsdiscov_cpp_change_quantiles, 5},
    {"_tsdiscov_cpp_fourier_entropy", (DL_FUNC) &_tsdiscov_cpp_fourier_entropy, 2},
    {"_tsdiscov_cpp_abs_energy", (DL_FUNC) &_tsdiscov_cpp_abs_energy, 1},
    {"_tsdiscov_cpp_sum_values", (DL_FUNC) &_tsdiscov_cpp_sum_values, 1},
    {"_tsdiscov_cpp_has_duplicate", (DL_FUNC) &_tsdiscov_cpp_has_duplicate, 1},
    {"_tsdiscov_cpp_has_duplicate_max", (DL_FUNC) &_tsdiscov_cpp_has_duplicate_max, 1},
    {"_tsdiscov_cpp_has_duplicate_min", (DL_FUNC) &_tsdiscov_cpp_has_duplicate_min, 1},
    {"_tsdiscov_cpp_percentage_reoccurring", (DL_FUNC) &_tsdiscov_cpp_percentage_reoccurring, 1},
    {"_tsdiscov_cpp_sum_reoccurring", (DL_FUNC) &_tsdiscov_cpp_sum_reoccurring, 1},
    {"_tsdiscov_cpp_ratio_unique_values", (DL_FUNC) &_tsdiscov_cpp_ratio_unique_values, 1},
    {"_tsdiscov_cpp_symmetry_looking", (DL_FUNC) &_tsdiscov_cpp_symmetry_looking, 2},
    {"_tsdiscov_cpp_large_standard_deviation", (DL_FUNC) &_tsdiscov_cpp_large_standard_deviation, 2},
    {"_tsdiscov_cpp_variance_larger_than_std", (DL_FUNC) &_tsdiscov_cpp_variance_larger_than_std, 1},
    {"_tsdiscov_cpp_adf_test", (DL_FUNC) &_tsdiscov_cpp_adf_test, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsdiscov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
